generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Task {
  id          String            @id @default(cuid())
  title       String
  status      String
  label       String
  cost        String
  category    String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  userId      String?
  fileHistory FileTaskHistory[]
  user        User?             @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Favorite {
  id     String @id @default(cuid())
  fileId Int    @unique
  userId String @unique
  file   File   @relation(fields: [fileId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([fileId, userId])
  @@index([userId])
  @@index([fileId])
}

model File {
  id               Int               @id @default(autoincrement())
  name             String
  blobUrl          String
  fileType         String
  fileSize         String
  processingStatus String
  label            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userId           String
  access           FileAccess        @default(PRIVATE)
  documentType     DocumentType?
  dataSubsections  DataSubsection[]
  favorites        Favorite?
  taskHistory      FileTaskHistory[]
  textSubsections  TextSubsection[]

  @@index([userId])
}

model TextSubsection {
  id               Int      @id @default(autoincrement())
  fileId           Int
  pageNumber       Int
  text             String
  pineconeVectorId String?
  pineconeMetadata Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  file             File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  @@unique([fileId, pageNumber])
}

model DataSubsection {
  id               Int      @id @default(autoincrement())
  fileId           Int
  dataContent      Json
  pineconeVectorId String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  file             File     @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([fileId])
}

model FileTaskHistory {
  id     String   @id @default(cuid())
  fileId Int
  taskId String
  userId String
  usedAt DateTime @default(now())
  file   File     @relation(fields: [fileId], references: [id])
  task   Task     @relation(fields: [taskId], references: [id])
  user   User     @relation(fields: [userId], references: [id])

  @@index([fileId, taskId, userId])
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  favorites       Favorite[]
  fileTaskHistory FileTaskHistory[]
  sessions        Session[]
  tasks           Task[]
  // Removed teamId and team fields as team data is managed in Auth0
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
 
  @@unique([identifier, token])
}

enum FileAccess {
  PUBLIC
  PRIVATE
  SHARED
}

enum DocumentType {
  REGULATORY_FRAMEWORK
  COMPLIANCE_SUBMISSION
  COMPLIANCE_REPORT
}


enum FileProcessingStatus {
  IN_PROGRESS
  PROCESSING
  DONE
  FAILED
}
