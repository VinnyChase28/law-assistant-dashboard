generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum FileAccess {
  PUBLIC
  PRIVATE
  SHARED
}

enum UserRole {
  ADMIN
  MEMBER
}

enum DocumentType {
  LEGAL_CONTRACTS
  LITIGATION_DOCUMENTS
  CORPORATE_GOVERNANCE
  REGULATORY_COMPLIANCE
  INTELLECTUAL_PROPERTY
  CLIENT_CORRESPONDENCE
  LEGAL_RESEARCH
  TRANSACTIONAL_DOCUMENTS
  ESTATE_PLANNING
  EMPLOYMENT_LAW
  REAL_ESTATE_LAW
  CONSTRUCTION_PROPOSALS
  DISCOVERY_DOCUMENTS
}

enum Label {
  RESEARCH
  COMPLIANCE
  SUMMARY
  EXTRACTION
  CONTRACT
  DRAFTING
  REVIEW
  NEGOTIATION
  LITIGATION_PREPARATION
  DUE_DILIGENCE
  CASE_ANALYSIS
  CLIENT_CONSULTATION
  REGULATORY_ANALYSIS
  DOCUMENT_FILING
  INTELLECTUAL_PROPERTY
}

enum FileProcessingStatus {
  IN_PROGRESS
  PROCESSING
  DONE
  FAILED
}

model Task {
  id          String            @id @default(cuid())
  title       String
  status      String
  label       Label
  cost        String
  category    String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  userId      String?
  user        User?             @relation(fields: [userId], references: [id])
  fileHistory FileTaskHistory[]

  @@index([userId])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  files       File[]
  companyId   String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  status      String?
  createBy    String?

  @@index([companyId])
}

model File {
  id                Int               @id @default(autoincrement())
  name              String
  blobUrl           String
  fileType          String
  fileSize          String
  vectorId          String?
  processingStatus  String
  vectorProcessedAt DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  projectId         String
  project           Project           @relation(fields: [projectId], references: [id])
  userId            String
  access            FileAccess        @default(PRIVATE)
  documentType      DocumentType?
  taskHistory       FileTaskHistory[]

  @@index([userId, projectId])
}

// Join table for File and Task
model FileTaskHistory {
  id     String   @id @default(cuid())
  fileId Int // Corresponds to the 'id' in File model
  taskId String // Corresponds to the 'id' in Task model
  userId String // ID of the user who created this history record
  usedAt DateTime @default(now()) // When the file was used in the task
  file   File     @relation(fields: [fileId], references: [id])
  task   Task     @relation(fields: [taskId], references: [id])
  user   User     @relation(fields: [userId], references: [id])

  @@index([fileId, taskId, userId])
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  roleId          String
  role            Role              @relation(fields: [roleId], references: [id])
  accounts        Account[]
  sessions        Session[]
  teamId          String?
  companyId       String?
  teams           Team[]            @relation("UserTeams")
  team            Team?             @relation(fields: [teamId], references: [id])
  company         Company?          @relation(fields: [companyId], references: [id])
  tasks           Task[]
  FileTaskHistory FileTaskHistory[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Role {
  id    String   @id @default(cuid())
  name  UserRole
  users User[]
}

model Team {
  id        String  @id @default(cuid())
  name      String
  companyId String
  users     User[]  @relation("UserTeams")
  company   Company @relation(fields: [companyId], references: [id])
  User      User[]

  @@index([companyId])
}

model Company {
  id                String  @id @default(cuid())
  name              String
  teams             Team[]
  users             User[]
  pineconeIndexName String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
